name: Build, Sign, Notarize, and Release macOS CLI
permissions:
  contents: write

on:
  push:
    tags:
      - "*.*.*" # Trigger on version tags like v1.0.0
jobs:
  release:
    runs-on: ubuntu-latest
    environment: deploy
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Release Version
        id: vars
        run: echo "RELEASE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false

  build-macos:
    runs-on: macos-latest
    environment: deploy
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode and Import PEM Certificate
        env:
          MACOS_CERT_PEM: ${{ secrets.MACOS_CERT_PEM }}
        run: |
          echo "$MACOS_CERT_PEM" | base64 --decode > macos_cert.pem
          security create-keychain -p "password" build.keychain
          security import macos_cert.pem -k build.keychain -T /usr/bin/codesign
          security default-keychain -s build.keychain
          security unlock-keychain -p "password" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "password" build.keychain

      - name: Install dependencies
        run: brew install gcc

      - name: Build macOS CLI Binary
        run: make macos # Assuming the Makefile is set up for macOS amd64

      - name: Code Sign CLI Binary
        env:
          CODE_SIGN_IDENTITY: "Developer ID Application: Fernando Crozetta (W9XMAAY8XN)"
        run: |
          codesign --force --sign "$CODE_SIGN_IDENTITY" --options runtime output/fc.json

      - name: Verify Code Signature
        run: codesign --verify --verbose=4 output/fc.json

      - name: Zip CLI Binary for Notarization
        run: |
          cd output
          zip -r fc.json.zip fc.json
          cd ..

      - name: Notarize CLI Binary
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --notarize-app -f output/fc.json.zip --primary-bundle-id "dev.fcrozetta.fc.json" -u "$APPLE_ID" -p "$APPLE_APP_SPECIFIC_PASSWORD"

      - name: Wait for Notarization
        run: |
          sleep 60  # Wait for Apple to process
          xcrun altool --notarization-info "$REQUEST_UUID" -u "$APPLE_ID" -p "$APPLE_APP_SPECIFIC_PASSWORD"

      - name: Staple Notarization Ticket
        run: |
          xcrun stapler staple output/fc.json

      - name: Upload macOS CLI Binary as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: output/fc.json
          asset_name: "fc.json_macos_signed"
          asset_content_type: application/octet-stream
